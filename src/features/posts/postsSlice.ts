import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { fetchPost, fetchPosts, newPost } from './postsAPI';

export interface PostType {
    userId: number;
    id: number,
    title: string
    body: string
}

export interface addPostType {
  userId: number;
  title: string
  body: string
}

export interface ResponseType {
  data:PostType[] | PostType
}

export interface PostsState {
    posts: PostType[]
    loading:boolean
    error:string
    post:PostType | null
}
export interface ActionType {
    payload:PostType[] | any
}

const initialState: PostsState = {
    posts:[],
    loading:false,
    error:"",
    post:null
  };


export const allPosts = createAsyncThunk(
    'posts/fetch',
    async () => {
      const response = await fetchPosts();
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
  );

export const singlePost = createAsyncThunk(
    'post/fetch',
    async (id:number) => {
      const response = await fetchPost(id);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
  );



export const createPost = createAsyncThunk(
    'post/create',
    async ({title, body, userId}:addPostType) => {
      const response = await newPost(title, body, userId);
      // The value we return becomes the `fulfilled` action payload
      if(response) return response.data
    }
);





export const postsSlice = createSlice({
  name: 'posts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
   
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
   builder.
    addCase(allPosts.pending, (state:PostsState) => {
        state.loading = true
        state.error = ""
   });
   builder
    .addCase(allPosts.fulfilled, (state:PostsState, action:ActionType) => {
        state.posts = action.payload
        state.loading = false
   });
   builder
    .addCase(allPosts.rejected, (state:PostsState) => {
        state.error = 'Rejected'
        state.loading = false
   });
   
   builder.
   addCase(singlePost.pending, (state:PostsState) => {
       state.loading = true
       state.error = ""
  });
  builder
   .addCase(singlePost.fulfilled, (state:PostsState, action:ActionType) => {
       state.post = action.payload
       state.loading = false
  });
  builder
   .addCase(singlePost.rejected, (state:PostsState) => {
       state.error = 'Rejected'
       state.loading = false
  });




    builder.
      addCase(createPost.pending, (state:PostsState) => {
          state.loading = true
          state.error = ""
    });
    builder
      .addCase(createPost.fulfilled, (state:PostsState, action:ActionType) => {
          state.posts = [...state.posts, action.payload]
          state.loading = false
    });
    builder
      .addCase(createPost.rejected, (state:PostsState) => {
          state.error = 'Rejected'
          state.loading = false
    })
  }
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.posts.value)`


// export const selectCount = (state: RootState) => state.posts.value;



// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };


export default postsSlice.reducer;
